package uc.ucworks.videosnap

import android.content.Context
import android.content.Intent
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.auth.api.signin.GoogleSignInAccount
import com.google.android.gms.auth.api.signin.GoogleSignInClient
import com.google.android.gms.auth.api.signin.GoogleSignInOptions
import com.google.android.gms.common.api.Scope
import com.google.android.gms.drive.Drive
import com.google.android.gms.drive.DriveContents
import com.google.android.gms.drive.DriveFile
import com.google.android.gms.drive.Metadata
import com.google.android.gms.drive.MetadataChangeSet
import java.io.File

class GoogleDriveManager(private val context: Context) {

    private val googleSignInClient: GoogleSignInClient by lazy {
        val gso = GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
            .requestScopes(Scope(Drive.SCOPE_FILE))
            .build()
        GoogleSignIn.getClient(context, gso)
    }

    fun getSignInIntent(): Intent {
        return googleSignInClient.signInIntent
    }

    fun handleSignInResult(intent: Intent, onSignedIn: (GoogleSignInAccount) -> Unit) {
        GoogleSignIn.getSignedInAccountFromIntent(intent).addOnSuccessListener {
            onSignedIn(it)
        }
    }

    fun listFiles(googleSignInAccount: GoogleSignInAccount, onFilesListed: (List<Metadata>) -> Unit) {
        val driveClient = Drive.getDriveClient(context, googleSignInAccount)
        driveClient.requestSync().addOnSuccessListener { 
            val query = com.google.android.gms.drive.query.Query.Builder()
                .addFilter(com.google.android.gms.drive.query.Filters.mimeTypeEqualTo("video/mp4"))
                .build()
            driveClient.query(query).addOnSuccessListener {
                onFilesListed(it.toList())
            }
        }
    }

    fun downloadFile(googleSignInAccount: GoogleSignInAccount, metadata: Metadata, outFile: File, onDownloaded: () -> Unit) {
        val driveClient = Drive.getDriveClient(context, googleSignInAccount)
        val driveFile = metadata.driveId.asDriveFile()
        driveClient.openFile(driveFile, DriveFile.MODE_READ_ONLY).addOnSuccessListener { driveContents ->
            val inputStream = driveContents.inputStream
            outFile.outputStream().use { 
                inputStream.copyTo(it)
            }
            onDownloaded()
        }
    }

    fun uploadFile(googleSignInAccount: GoogleSignInAccount, file: File, onUploaded: () -> Unit) {
        val driveClient = Drive.getDriveClient(context, googleSignInAccount)
        driveClient.newDriveContents().addOnSuccessListener { driveContents ->
            val outputStream = driveContents.outputStream
            file.inputStream().use { 
                it.copyTo(outputStream)
            }
            val changeSet = MetadataChangeSet.Builder()
                .setTitle(file.name)
                .setMimeType("application/json")
                .build()
            driveClient.createFile(driveClient.appFolder, changeSet, driveContents).addOnSuccessListener { 
                onUploaded()
            }
        }
    }
}
