package uc.ucworks.videosnap

import androidx.compose.foundation.Canvas
import androidx.compose.ui.geometry.Offset
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.detectDragGestures
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.width
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.unit.dp

/**
 * A composable that displays a timeline clip.
 *
 * @param clip The timeline clip to display.
 * @param duration The total duration of the timeline.
 * @param waveform The waveform of the audio.
 * @param onResize A callback that is invoked when the user resizes the clip.
 * @param modifier The modifier to apply to the composable.
 */
@Composable
fun TimelineClipView(
    clip: TimelineClip,
    duration: Long,
    waveform: List<Int>,
    onResize: (Long, Long) -> Unit,
    modifier: Modifier = Modifier
) {
    val clipWidth = ((clip.endTime - clip.startTime).toFloat() / duration) * 1000 // Assuming timeline width is 1000.dp

    Box(
        modifier = modifier
            .width(clipWidth.dp)
            .fillMaxHeight()
            .background(Color.Blue)
    ) {
        Canvas(modifier = Modifier.fillMaxSize()) {
            val waveFormHeight = size.height / 2
            val waveFormWidth = size.width / waveform.size

            for (i in waveform.indices) {
                val x = i * waveFormWidth
                val y = (waveform[i] / 32767f) * waveFormHeight
                drawLine(
                    color = Color.White,
                    start = Offset(x, waveFormHeight - y),
                    end = Offset(x, waveFormHeight + y)
                )
            }
        }

        // Resize handles
        Box(
            modifier = Modifier
                .fillMaxHeight()
                .width(10.dp)
                .background(Color.Red)
                .align(Alignment.CenterStart)
                .pointerInput(Unit) {
                    detectDragGestures {
                        val newStartTime = clip.startTime + (it.x * duration / 1000).toLong()
                        onResize(newStartTime, clip.endTime)
                    }
                }
        )
        Box(
            modifier = Modifier
                .fillMaxHeight()
                .width(10.dp)
                .background(Color.Red)
                .align(Alignment.CenterEnd)
                .pointerInput(Unit) {
                    detectDragGestures {
                        val newEndTime = clip.endTime + (it.x * duration / 1000).toLong()
                        onResize(clip.startTime, newEndTime)
                    }
                }
        )
    }
}
